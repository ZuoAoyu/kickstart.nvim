# Welcome to the Neovim Tutorial

Neovim 教程欢迎页

Neovim is a very powerful editor that has many commands, too many to explain in
a tutorial such as this. This tutorial is designed to describe enough of the
commands that you will be able to easily use Neovim as an all-purpose editor.

Neovim 是一款功能强大的编辑器，其指令系统之丰富远超本教程所能涵盖。本教程旨在通过关键指令的教学，助您轻松掌握 Neovim 作为全能编辑器的使用精髓。

It is IMPORTANT to remember that this tutorial is set up to teach by use. That
means that you need to do the exercises to learn them properly. If you only
read the text, you will soon forget what is most important!

重要提示：本教程采用"做中学"的教学理念。这意味着您必须动手完成练习才能真正掌握知识。若仅停留于文字阅读，您将很快遗忘最核心的内容！

For now, make sure that your Caps-Lock is off and press the `j`{normal} key enough
times to move the cursor so that Lesson 0 completely fills the screen.

此刻，请确认大写锁定键处于关闭状态，并持续按下 `j`{normal} 键，直至光标移动至屏幕完全显示"第 0 课"内容为止。

# Lesson 0

第 0 课

NOTE: The commands in the lessons will modify the text, but those changes
won't be saved. Don't worry about messing things up; just remember that
pressing [<Esc>](<Esc>) and then [u](u) will undo the latest change.

注意：本课所有指令都会修改文本内容，但这些改动不会实际保存。无需担心误操作造成的混乱——请牢记按下 [<Esc>](<Esc>) 后接 [u](u) 即可撤销最近一次修改。

This tutorial is interactive, and there are a few things you should know.
- Type [<Enter>](<Enter>) on links [like this](holy-grail    ) to open the linked help section.
- Or simply type [K](K) on any word to find its documentation!
- You can close this help window with `:q`{vim} `<Enter>`{normal}

本互动教程具有以下使用须知：
- 在类似[这个示例](holy-grail    )的链接处按 [<Enter>](<Enter>) 可打开对应帮助文档
- 或直接在任意单词处按 [K](K) 查询其文档说明！
- 使用 `:q`{vim} `<Enter>`{normal} 可关闭当前帮助窗口

When there is a ✗ sign at the left, you will be required to modify text.
Once you have done the changes correctly, the ✗ sign at the left will change
to ✓. I imagine you can already see how neat Neovim can be.

当左侧出现 ✗ 标记时，表示需要您完成文本修改。正确完成修改后，左侧标记将变为 ✓。此刻您已能初窥 Neovim 的精妙之处。

Other times, you'll be prompted to run a command (I'll explain this later):

某些情况下会提示您执行命令（后续将详细解释）：

`:help`{vim} `<Enter>`{normal}

or press a sequence of keys
或按特定组合键
~~~ normal
    <Esc>0f<Space>d3wP$P
~~~
Text within <'s and >'s (like `<Enter>`{normal}) describes a key to press
instead of text to type.
尖括号包裹的内容（如 `<Enter>`{normal}）表示需要按下的物理按键，而非输入文本字符。
~~~ normal
    <Esc>0f<Space>d3wP$P
~~~
Now, move to the next lesson (use the `j`{normal} key to scroll down).

现在，请使用 `j`{normal} 键向下滚动进入下一课程。

# Lesson 1.1: MOVING THE CURSOR

第 1.1 课：光标移动

** To move the cursor, press the `h`, `j`, `k`, `l` keys as indicated. **

** 根据屏幕指示，通过 `h`、`j`、`k`、`l` 键实现光标移动 **

↑
          k         Hint: The `h`{normal} key is at the left and moves left.
     ← h    l →           The `l`{normal} key is at the right and moves right.
         j                The `j`{normal} key looks like a down arrow.
         ↓

↑
           k        提示：`h`{normal} 键位于左侧控制向左移动。
     ← h    l →          `l`{normal} 键位于右侧控制向右移动。
         j                `j`{normal} 键形似向下箭头。
         ↓

1. Move the cursor around the screen until you are comfortable.

1. 在屏幕上移动光标直至操作熟练。

2. Hold down the down key (`j`{normal}) until it repeats.
    Now you know how to move to the next lesson.

2. 长按向下键 (`j`{normal}) 直至其开始连击。
   现在您已掌握如何跳转至下一课程。

3. Using the down key, move to Lesson 1.2.

3. 使用向下键移动至课程 1.2。

NOTE: If you are ever unsure about something you typed, press <Esc> to place
      you in Normal mode. Then retype the command you wanted.

注意：若对输入内容存在疑虑，请按 <Esc> 键进入
      普通模式 (Normal mode)，然后重新输入指令。

NOTE: The cursor keys should also work. But using hjkl you will be able to
      move around much faster, once you get used to it.

注意：方向键仍可使用。但熟练使用 hjkl 键后，
      您将能更高效地进行光标移动。

# Lesson 1.2: EXITING NEOVIM

课程 1.2: 退出 NEOVIM

!! NOTE: Before executing any of the steps below, read the entire lesson !!

!! 重要提示：执行以下步骤前，请完整阅读本课程内容 !!

1. Press the <Esc> key (to make sure you are in Normal mode).

1. 按下 <Esc> 键（确保进入普通模式）。

2. Type:

2. 输入：

`:q!`{vim} `<Enter>`{normal}

This quits the editor, DISCARDING any changes you have made.

此操作将退出编辑器，且不保存任何修改。

3. Open Neovim and get back here by executing the command that got you into
    this tutorial. That might be:

3. 重新打开 Neovim 并通过执行初始命令返回本教程。
   例如输入：

`:Tutor`{vim} `<Enter>`{normal}

4. If you have these steps memorized and are confident, execute steps
    1 through 3 to exit and re-enter the editor.

4. 若已熟记上述步骤，请执行步骤 1 至 3 完成退出并重新进入编辑器。

NOTE: [:q!](:q) `<Enter>`{normal} discards any changes you made. In a few lessons you
      will learn how to save the changes to a file.

注意：[:q!](:q) `<Enter>`{normal} 会丢弃所有修改。后续课程将学习
      如何将修改保存至文件。

5. Move the cursor down to Lesson 1.3.

5. 移动光标至课程 1.3。

# Lesson 1.3: TEXT EDITING: DELETION

课程 1.3: 文本编辑：删除操作

** Press `x`{normal} to delete the character under the cursor. **

** 按 `x`{normal} 键可删除光标所在位置的字符 **

1. Move the cursor to the line below marked ✗.

1. 将光标移至下方标有 ✗ 的错误行。

2. To fix the errors, move the cursor until it is on top of the
    character to be deleted.

2. 修正错误时，先将光标定位至待删除字符。

3. Press [the x key](x) to delete the unwanted character.

3. 按下 [x 键](x) 删除多余字符。

4. Repeat steps 2 through 4 until the sentence is correct.

4. 重复步骤 2 至 4 直至句子修正完成。

The ccow jumpedd ovverr thhe mooon.

The ccow jumpedd ovverr thhe mooon.

5. Now that the line is correct, go on to Lesson 1.4.

5. 完成修正后，继续学习课程 1.4。

NOTE: As you go through this tutorial, do not try to memorize everything,
      your Neovim vocabulary will expand with usage. Consider returning to
      this tutorial periodically for a refresher.

注意：学习本教程时，无需刻意记忆所有内容，
      您的 Neovim 使用能力会随着实践逐步提升。建议定期返回本教程进行复习。

# Lesson 1.4: TEXT EDITING: INSERTION

第1.4课：文本编辑：插入

** Press `i`{normal} to insert text. **

** 按 `i`{normal} 插入文本。 **

1. Move the cursor to the first line below marked ✗.

1. 将光标移至下方标记✗的首行。

2. To make the first line the same as the second, move the cursor on top
    of the first character AFTER where the text is to be inserted.

2. 要使首行与第二行内容一致，请将光标移动到需要插入文本的位置之后的首个字符上方。

3. Press `i`{normal} and type in the necessary additions.

3. 按下 `i`{normal} 并输入需要添加的内容。

4. As each error is fixed press `<Esc>`{normal} to return to Normal mode.
    Repeat steps 2 through 4 to correct the sentence.

4. 每修正一处错误后按 `<Esc>`{normal} 返回普通模式。
    重复步骤2至4以修正整个句子。

There is text misng this .
There is some text missing from this line.

5. When you are comfortable inserting text move to Lesson 1.5.

5. 当您熟练掌握文本插入操作后，请继续学习第1.5课。

# Lesson 1.5: TEXT EDITING: APPENDING

第1.5课：文本编辑：追加

** Press `A`{normal} to append text. **

** 按 `A`{normal} 追加文本。 **

1. Move the cursor to the first line below marked ✗.
    It does not matter on what character the cursor is in that line.

1. 将光标移至下方标记✗的首行。
    此时光标在该行的具体位置无关紧要。

2. Press [A](A) and type in the necessary additions.

2. 按下 [A](A) 并输入需要添加的内容。

3. As the text has been appended press `<Esc>`{normal} to return to Normal
    mode.

3. 完成文本追加后按 `<Esc>`{normal} 返回普通模式。

4. Move the cursor to the second line marked ✗ and repeat
    steps 2 and 3 to correct this sentence.

4. 移动光标至第二个标记✗的行，重复
    步骤2和3以修正该句。

There is some text missing from th
There is some text missing from this line.
There is also some text miss
There is also some text missing here.

5. When you are comfortable appending text move to Lesson 1.6.

5. 当您熟练掌握文本追加操作后，请继续学习第1.6课。

# Lesson 1.6: EDITING A FILE

第1.6课：编辑文件

** Use `:wq`{vim} to write a file and quit. **

** 使用 `:wq`{vim} 保存文件并退出。 **

!! NOTE: Before executing any of the steps below, read the entire lesson !!

!! 重要提示：执行以下任何步骤前，请完整阅读本课内容 !!

1. Exit this tutorial as you did in Lesson 1.2: `:q!`{vim}
    Or, if you have access to another terminal, do the following there.

1. 按照第1.2课的方法退出本教程：输入 `:q!`{vim}
    或者，如果您有其他终端可用，请在新终端执行后续操作。

2. At the shell prompt type this command:
2. 在终端提示符中输入以下命令：

~~~ sh
    $ nvim tutor
~~~
    'nvim' is the command to start the Nvim editor, 'tutor' is the name of
    the file you wish to edit. Use a file that may be changed.

    'nvim'是启动Nvim编辑器的命令，'tutor'是您要编辑的文件名。请使用可修改的文件进行练习。

3. Insert and delete text as you learned in the previous lessons.

3. 使用前几课学到的插入和删除技巧进行文本编辑。

4. Save the file with changes and exit Neovim with:
4. 保存文件并退出 Neovim：
~~~ cmd
    :wq
~~~
    Note you'll need to press `<Enter>` to execute the command.
~~~ cmd
    注意需要按 `<Enter>` 键执行该命令。

5. If you have quit this tutorial in step 1, restart and move down
    to the following summary.

5. 如果您在第 1 步退出了本教程，请重新启动并向下滚动至以下总结部分。

6. After reading and understanding the above steps: do them.

6. 阅读并理解上述步骤后：请执行这些操作。

# Lesson 1 SUMMARY

第一课 总结

1. The cursor is moved using either the arrow keys or the hjkl keys.
     h (left)   j (down)       k (up)       l (right)

1. 光标移动可使用方向键或 hjkl 键：
     h (左)   j (下)       k (上)       l (右)

2. To start Neovim from the shell prompt type:

2. 从 shell 提示符启动 Neovim：

~~~
~~~ sh
    $ nvim 文件名
~~~

3. To exit Neovim type: `<Esc>`{normal} `:q!`{vim} `<Enter>`{normal} to trash all changes.
                OR type: `<Esc>`{normal} `:wq`{vim} `<Enter>`{normal} to save the changes.
3. 退出 Neovim 方式：`<Esc>`{normal} `:q!`{vim} `<Enter>`{normal} 丢弃所有更改。
                或输入：`<Esc>`{normal} `:wq`{vim} `<Enter>`{normal} 保存更改。

4. To delete the character at the cursor type: `x`{normal}

4. 删除光标处字符：输入 `x`{normal}

5. To insert or append text type:
    `i`{normal} insert text `<Esc>`{normal}     insert before the cursor.
    `A`{normal} append text `<Esc>`{normal}     append after the line.

5. 插入/追加文本方式：
    `i`{normal} 插入文本 `<Esc>`{normal}     在光标前插入
    `A`{normal} 追加文本 `<Esc>`{normal}     在行尾追加

NOTE: Pressing `<Esc>`{normal} will place you in Normal mode or will cancel
      an unwanted and partially completed command.

注意：按下 `<Esc>`{normal} 将返回普通模式或取消未完成的命令。

Now continue with Lesson 2.

现在继续学习第二课。

# Lesson 2.1: DELETION COMMANDS

第二课 2.1：删除命令

** Type `dw`{normal} to delete a word. **

** 输入 `dw`{normal} 来删除一个单词。 **

1. Press `<Esc>`{normal} to make sure you are in Normal mode.

1. 按 `<Esc>`{normal} 确保处于普通模式。

2. Move the cursor to the line below marked ✗.

2. 将光标移至下方标有 ✗ 的行。

3. Move the cursor to the beginning of a word that needs to be deleted.

3. 将光标移动到需要删除的单词起始处。

4. Type [d](d)[w](w) to make the word disappear.

4. 输入 [d](d)[w](w) 使该单词消失。

There are a some words fun that don't belong paper in this sentence.

5. Repeat steps 3 and 4 until the sentence is correct and go to Lesson 2.2.

5. 重复步骤 3 和 4 直至句子修正正确，然后进入第二课 2.2。

# Lesson 2.2: MORE DELETION COMMANDS

第二课 2.2：更多删除命令

** Type `d$`{normal} to delete to the end of the line. **

** 输入 `d$`{normal} 删除至行尾。 **

1. Press `<Esc>`{normal} to make sure you are in Normal mode.

1. 按 `<Esc>`{normal} 确保处于普通模式。

2. Move the cursor to the line below marked ✗.

2. 将光标移至下方标有 ✗ 的行。

3. Move the cursor to the end of the correct line (AFTER the first . ).

3. 将光标移动到正确行的末尾（第一个 . 之后）。

4. Type `d$`{normal} to delete to the end of the line.

4. 输入 `d$`{normal} 删除至行尾。

Somebody typed the end of this line twice. end of this line twice.

5. Move on to Lesson 2.3 to understand what is happening.

5. 进入第2.3课，理解其运作原理

# Lesson 2.3: ON OPERATORS AND MOTIONS

第2.3课：操作符与动作

Many commands that change text are made from an [operator](operator) and a [motion](navigation).
The format for a delete command with the [d](d) delete operator is as follows:

许多修改文本的命令由一个[操作符](operator)和一个[移动动作](navigation)组合而成。以[d](d)删除操作符为例，其命令格式如下：

d   motion

d   移动动作

Where:
    d      - is the delete operator.
    motion - is what the operator will operate on (listed below).

其中：
    d      - 删除操作符
    移动动作 - 指定操作符作用范围（下方列示）

A short list of motions:
    [w](w) - until the start of the next word, EXCLUDING its first character.
    [e](e) - to the end of the current word, INCLUDING the last character.
    [$]($) - to the end of the line, INCLUDING the last character.

常用移动动作简表：
    [w](w) - 至下一单词首字符前（不含该字符）
    [e](e) - 至当前单词尾字符（包含该字符）
    [$]($) - 至行末（包含最后一个字符）

Thus typing `de`{normal} will delete from the cursor to the end of the word.

因此输入`de`{normal}将从光标处删除至单词末尾。

NOTE: Pressing just the motion while in Normal mode without an operator
      will move the cursor as specified.

注意：在普通模式下单独使用移动动作时，仅移动光标至指定位置。

# Lesson 2.4: USING A COUNT FOR A MOTION

第2.4课：移动动作的计数应用

** Typing a number before a motion repeats it that many times. **

** 在移动动作前输入数字可重复执行该动作相应次数 **

1. Move the cursor to the start of the line marked ✓ below.

1. 将光标移至下方标有✓的行首

2. Type `2w`{normal} to move the cursor two words forward.

2. 输入`2w`{normal}向前移动两个单词

3. Type `3e`{normal} to move the cursor to the end of the third word forward.

3. 输入`3e`{normal}移动至第三个单词末尾

4. Type `0`{normal} ([zero](0)) to move to the start of the line.

4. 输入`0`{normal}（[零键](0)）返回行首

5. Repeat steps 2 and 3 with different numbers.

5. 尝试用不同数字重复步骤2和3

This is just a line with words you can move around in.

6. Move on to Lesson 2.5.

6. 进入第2.5课

# Lesson 2.5: USING A COUNT TO DELETE MORE

第2.5课：结合计数的删除操作

** Typing a number with an operator repeats it that many times. **

** 在操作符前添加数字可倍增操作效果 **

In the combination of the delete operator and a motion mentioned above you
insert a count before the motion to delete more:
     d   number   motion

在之前提到的删除操作符与移动动作组合中，通过在动作前添加计数可实现更大范围的删除：
     d   数字   移动动作

1. Move the cursor to the first UPPER CASE word in the line marked ✗.

1. 将光标移至标有✗行中的首个大写单词

2. Type `d2w`{normal} to delete the two UPPER CASE words

2. 输入`d2w`{normal} 删除两个连续大写单词

3. Repeat steps 1 and 2 with a different count to delete the consecutive
    UPPER CASE words with one command

3. 尝试不同计数值重复步骤1-2，用单条命令删除连续大写单词

This ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.

# Lesson 2.6: OPERATING ON LINES

第2.6课：整行操作

** Type `dd`{normal} to delete a whole line. **

** 输入`dd`{normal}可删除整行内容 **

Due to the frequency of whole line deletion, the designers of Vi decided
it would be easier to simply type two d's to delete a line.

由于整行删除操作的高频使用，Vi 的设计者认为直接输入两个 d 键来删除整行更为便捷。

1. Move the cursor to the second line in the phrase below.

1. 将光标移至下方短语的第二行。

2. Type [dd](dd) to delete the line.

2. 输入 [dd](dd) 删除当前行。

3. Now move to the fourth line.

3. 现在移至第四行。

4. Type `2dd`{normal} to delete two lines, then press `u`{normal} twice to undo all three lines.

4. 输入 `2dd`{normal} 删除两行，随后按两次 `u`{normal} 撤销所有被删除的三行。

1)  Roses are red,
2)  Mud is fun,
3)  Violets are blue,
4)  I have a car,
5)  Clocks tell time,
6)  Sugar is sweet
7)  And so are you.

1)  玫瑰艳若朱砂，
2)  泥泞趣味盎然，
3)  紫罗兰湛如晴空，
4)  我有一辆座驾，
5)  时钟细数光阴，
6)  方糖甘之如饴
7)  你亦甜美如斯。

# Lesson 2.7: THE UNDO COMMAND

第二课 2.7：撤销命令

** Press `u`{normal} to undo the last commands, `U`{normal} to fix a whole line. **

** 按 `u`{normal} 撤销上一步操作，`U`{normal} 恢复整行原始状态 **

1. Move the cursor to the line below marked ✗ and place it on the first error.

1. 将光标移至下方标有 ✗ 符号的行，定位至首个错误处。

2. Type `x`{normal} to delete the first unwanted character.

2. 输入 `x`{normal} 删除首个多余字符。

3. Now type `u`{normal} to undo the last command executed.

3. 输入 `u`{normal} 撤销最近执行的操作。

4. This time fix all the errors on the line using the `x`{normal} command.

4. 本次请使用 `x`{normal} 命令修正该行所有错误。

5. Now type a capital `U`{normal} to return the line to its original state.

5. 输入大写 `U`{normal} 使该行恢复至原始状态。

6. Now type `u`{normal} a few times to undo the `U`{normal} and preceding commands.

6. 多次输入 `u`{normal} 撤销 `U`{normal} 命令及之前的操作。

7. Now type `<C-r>`{normal} (Control + R) a few times to redo the commands.

7. 多次输入 `<C-r>`{normal}（Control + R）重做被撤销的操作。

Fiix the errors oon thhis line and reeplace them witth undo.

8. These are very useful commands. Now move on to the Lesson 2 Summary.

8. 这些命令极为实用。现在请进入第二课总结部分。

# Lesson 2 SUMMARY

第二课 总结

1. To delete from the cursor up to the next word type:    `dw`{normal}

1. 删除从光标到下一词首：        `dw`{normal}

2. To delete from the cursor to the end of a line type:   `d$`{normal}

2. 删除从光标至行尾：            `d$`{normal}

3. To delete a whole line type:                           `dd`{normal}

3. 删除整行：                    `dd`{normal}

4. To repeat a motion prepend it with a number:           `2w`{normal}

4. 重复操作前添加数字：          `2w`{normal}

5. The format for a change command is:

5. 编辑命令的标准格式为：

operator   [number]   motion

操作符   [次数]   移动指令

where:

其中：

operator -   is what to do, such as [d](d) for delete
        [number] -   is an optional count to repeat the motion
        motion   -   moves over the text to operate on, such as:
                        [w](w) (word),
                        [$]($) (to the end of line), etc.

操作符 -  执行动作，如 [d](d) 表示删除
        [次数] -  可选参数，表示重复执行次数
        移动指令 -  指定操作范围，如：
                        [w](w)（单词），
                        [$]($)（至行尾）等。

6. To move to the start of the line use a zero: [0](0)

6. 移动至行首使用数字零: [0](0)

7. To undo previous actions, type:            `u`{normal}  (lowercase u)
    To undo all the changes on a line, type:   `U`{normal}  (capital U)
    To undo the undos, type:                   `<C-r>`{normal}

7. 撤销上一个操作请键入:            `u`{normal}  (小写 u)
   撤销行内所有更改请键入:           `U`{normal}  (大写 U)
   重做被撤销的操作请键入:           `<C-r>`{normal}

# Lesson 3.1: THE PUT COMMAND

第三课 3.1: 粘贴命令

** Type `p`{normal} to put previously deleted text after the cursor. **

** 键入 `p`{normal} 可将之前删除的文本粘贴到光标之后。 **

1. Move the cursor to the first ✓ line below.

1. 将光标移至下方标有 ✓ 的第一行。

2. Type `dd`{normal} to delete the line and store it in a Neovim register.

2. 键入 `dd`{normal} 删除该行并存入 Neovim 寄存器。

3. Move the cursor to the c) line, ABOVE where the deleted line should go.

3. 移动光标至 c) 行上方，即目标插入位置。

4. Type `p`{normal} to put the line below the cursor.

4. 键入 `p`{normal} 将删除行粘贴至当前光标下方。

5. Repeat steps 2 through 4 to put all the lines in correct order.

5. 重复步骤 2-4 直至所有诗句排序正确。

d) Can you learn too?
b) Violets are blue,
c) Intelligence is learned,
a) Roses are red,

d) 智慧亦可修习？
b) 紫罗兰色幽柔，
c) 君能习得否？
a) 玫瑰红似火，

NOTE: You can also put the text before the cursor with `P`{normal} (capital P).

注意: 您也可以使用 `P`{normal} (大写 P) 将文本粘贴至光标前方。

# Lesson 3.2: THE REPLACE COMMAND

第三课 3.2: 替换命令

** Type `rx`{normal} to replace the character at the cursor with x. **

** 键入 `rx`{normal} 可将光标处字符替换为 x。 **

1. Move the cursor to the first line below marked ✗.

1. 将光标移至下方标有 ✗ 的第一行。

2. Move the cursor so that it is on top of the first error.

2. 移动光标至第一个错字位置。

3. Type `r`{normal} and then the character which should be there.

3. 键入 `r`{normal} 后接正确字符进行替换。

4. Repeat steps 2 and 3 until the first line is equal to the second one.

4. 重复步骤 2-3 直至首行与第二行完全一致。

Whan this lime was tuoed in, someone presswd some wrojg keys!

5. Now move on to Lesson 3.3.

5. 现在进入第三课 3.3。

NOTE: Remember that you should be learning by doing, not memorizing.

注意: 请牢记学习之道在于实践而非死记。

# Lesson 3.3: THE CHANGE OPERATOR

第三课 3.3: 修改操作符

** To change until the end of a word, type `ce`{normal}. **

** 要修改至单词末尾，请键入 `ce`{normal}。 **

1. Move the cursor to the first line below marked ✗.

1. 将光标移至下方标有 ✗ 的第一行。

2. Place the cursor on the "u" in "lubw".

2. 定位至 "lubw" 中的字母 "u"。

3. Type `ce`{normal} and the correct word (in this case, type "ine" ).

3. 键入 `ce`{normal} 并输入正确单词 (此处应键入 "ine" )。

4. Press `<Esc>`{normal} and move to the next character that needs to be changed.

4. 按下 `<Esc>`{normal} 并移至下一个待修改字符。

5. Repeat steps 3 and 4 until the first sentence is the same as the second.

5. 重复步骤 3-4 直至首句与第二句完全一致。

This lubw has a few wptfd that mrrf changing usf the change operator.
This line has a few words that need changing using the change operator.

Notice that [c](c)e deletes the word and places you in Insert mode.

注意[c](c)e会删除单词并使您进入插入模式。

# Lesson 3.4: MORE CHANGES USING `c`{normal}

第三课第4节：使用`c`{normal}进行更多修改

** The change operator is used with the same motions as delete. **

** 修改操作符与删除操作符使用相同的移动指令 **

1. The change operator works in the same way as delete. The format is:

1. 修改操作符的使用方式与删除操作符相同。格式为：

c    [number]   motion

c    [数字]   移动指令

2. The motions are the same, such as `w`{normal} (word) and `$`{normal} (end of line).

2. 移动指令同样包括`w`{normal}（单词）和`$`{normal}（行尾）等。

3. Move to the first line below marked ✗.

3. 移动到下方标记✗的第一行。

4. Move the cursor to the first error.

4. 将光标移动到第一个错误处。

5. Type `c$`{normal} and type the rest of the line like the second and press `<Esc>`{normal}.

5. 输入 `c$`{normal} 并输入该行剩余内容，使其与第二行一致，最后按`<Esc>`{normal}。

The end of this line needs some help to make it like the second.
The end of this line needs to be corrected using the c$ command.

NOTE: You can use the Backspace key to correct mistakes while typing.

注意：在输入过程中，您可以使用退格键纠正错误。

# Lesson 3 SUMMARY

第三课总结

1. To put back text that has just been deleted, type [p](p). This puts the
    deleted text AFTER the cursor (if a line was deleted it will go on the
    line below the cursor).

1. 要恢复刚删除的文本，请输入[p](p)。这将把删除的文本放置在光标之后（若删除的是整行则会出现在光标下方行）。

2. To replace the character under the cursor, type [r](r) and then the
    character you want to have there.

2. 要替换光标下的字符，请输入[r](r)后接目标字符。

3. The [change operator](c) allows you to change from the cursor to where
    the motion takes you. Type `ce`{normal} to change from the cursor to the
    end of the word, `c$`{normal} to change to the end of a line, etc.

3. [修改操作符](c)允许您从光标处修改到移动指令指定的位置。输入`ce`{normal}可修改从光标到单词结尾的内容，`c$`{normal}可修改到行尾等。

4. The format for change is:

4. 修改命令的格式为：

c   [number]   motion

c   [数字]   移动指令

Now go on to the next lesson.

现在请继续学习下一课。

# Lesson 4.1: CURSOR LOCATION AND FILE STATUS

第四课第1节：光标位置与文件状态

** Type `<C-g>`{normal} to show your location in a file and the file status.
 Type `G`{normal} to move to a line in the file. **

** 输入`<C-g>`{normal}可显示当前文件位置及文件状态。
 输入`G`{normal}可跳转到文件指定行。 **

NOTE: Read the entire lesson before executing any of these steps!!

注意：请完整阅读本节内容后再执行任何操作步骤！

1. Hold down the `<Ctrl>`{normal} key and press `g`{normal}. We call this `<C-g>`{normal}.
    A message will appear at the bottom of the page with the filename and
    the position in the file. Remember the line number for Step 3.

1. 按住<Ctrl>键并按下`g`{normal}（简称为`<C-g>`{normal}）。
    页面底部将显示包含文件名和当前位置的信息。请记住当前行号用于第三步操作。


NOTE: You may see the cursor position in the lower right corner of the
      screen. This happens when the ['ruler']('ruler') option is set.

注意：您可能会在屏幕右下角看到光标位置。这通常发生在设置了 ['ruler']('ruler') 选项时。

2. Press [G](G) to move you to the bottom of the file.
    Type [gg](gg) to move you to the start of the file.

2. 按下[G](G)键可使您跳转至文件末尾
    输入[gg](gg)可让您返回至文件起始位置

3. Type the number of the line you were on and then `G`{normal}. This will
    return you to the line you were on when you first pressed `<C-g>`{normal}.

3. 输入行号后接`G`{normal}键
    这将使您返回到首次按下`<C-g>`{normal}时所处的行号

4. If you feel confident to do this, execute steps 1 through 3.

4. 若您已掌握操作要领，请执行步骤1至步骤3

# Lesson 4.2: THE SEARCH COMMAND

第四课第二节：搜索命令

** Type `/`{normal} followed by a phrase to search for the phrase. **

** 在普通模式下输入`/`{normal}后接短语即可进行搜索 **

1. In Normal mode type the `/`{normal} character. Notice that it and the
    cursor appear at the bottom of the screen as with the `:`{normal} command.

1. 在普通模式下输入`/`{normal}字符。注意此时该字符与光标会像输入`:`{normal}命令时一样出现在屏幕底部

2. Now type 'errroor' `<Enter>`{normal}. This is the word you want to search for.

2. 现在输入'errroor'（错误拼写）并按`<Enter>`{normal}开始搜索目标词

3. To search for the same phrase again, simply type [n](n).
    To search for the same phrase in the opposite direction, type [N](N).

3. 重复搜索相同短语只需按[n](n)键
    若需反向搜索相同短语，请按[N](N)键

4. To search for a phrase in the backward direction, use [?](?) instead of `/`{normal}.

4. 进行逆向搜索时请使用[?](?)替代`/`{normal}

5. To go back to where you came from press `<C-o>`{normal}.
    (keep `<Ctrl>`{normal} pressed down while pressing the letter `o`{normal}).
    Repeat to go back further. `<C-i>`{normal} goes forward.

5. 按`<C-o>`{normal}可返回上一位置
    （长按`<Ctrl>`{normal}键同时按下字母`o`{normal}）
    重复操作可追溯更早记录。使用`<C-i>`{normal}可向前跳转

"errroor" is not the way to spell error; errroor is an error.

"errroor" 是error的错误拼写；errroor本身就是个拼写错误

NOTE: When the search reaches the end of the file it will continue at the
      start, unless the ['wrapscan']('wrapscan') option has been reset.

注意：当搜索到达文件末尾时，若未关闭['wrapscan']('wrapscan')选项，搜索将自动从文件头部继续

# Lesson 4.3: MATCHING PARENTHESES SEARCH

第四课第三节：括号匹配搜索

** Type `%`{normal} to find a matching ), ], or }. **

** 输入`%`{normal}查找配对的 )、] 或 } **

1. Place the cursor on any (, [, or { in the line below marked ✓.

1. 将光标置于下方标记✓行中的任意(、[ 或 { 符号上

2. Now type the [%](%) character.

2. 输入[%](%)字符

3. The cursor will move to the matching parenthesis or bracket.

3. 光标将自动跳转至对应的括号或中括号

4. Type `%`{normal} to move the cursor to the other matching bracket.

4. 再次输入`%`{normal}可使光标跳转至另一端的匹配括号

5. Move the cursor to another (, ), [, ], {, or } and see what `%`{normal} does.

5. 尝试将光标移至其他(、)、[、]、{ 或 } 符号，观察`%`{normal}的效果

This ( is a test line with ('s, ['s, ] and {'s } in it. ))

NOTE: This is very useful in debugging a program with unmatched parentheses!

注意：该功能在调试包含未闭合括号的程序时极为实用！


# Lesson 4.4: THE SUBSTITUTE COMMAND

第四课 4.4：替换命令

** Type `:s/old/new/g` to substitute "new" for "old". **

** 输入 `:s/old/new/g` 将 "old" 替换为 "new" **

1. Move the cursor to the line below marked ✗.

1. 将光标移至标记✗的下一行。

2. Type
~~~ cmd
        :s/thee/the/
~~~
    NOTE: The [:s](:s) command only changed the first match of "thee" in the line.

2. 输入
~~~ cmd
        :s/thee/the/
~~~
    注意：[:s](:s) 命令仅替换本行首个匹配的 "thee"。

3. Now type
~~~ cmd
        :s/thee/the/g
~~~
    Adding the g [flag](:s_flags) means to substitute globally in the line,
    change all occurrences of "thee" in the line.

3. 现在输入
~~~ cmd
        :s/thee/the/g
~~~
    添加 g [标志](:s_flags) 表示在本行进行全局替换，
    即更改本行所有出现的 "thee"。

Usually thee best time to see thee flowers is in thee spring.

通常观赏thee花的最佳时节是在thee春季。

4. To change every occurrence of a character string between two lines, type
4. 要修改两行之间的所有匹配字符串，请输入
~~~ cmd
        :#,#s/old/new/g
~~~
    where # are the line numbers of the range of lines where the
    substitution is to be done (i.e., `1,3` means from line 1 to line 3, inclusive).

    其中 # 代表替换范围的首尾行号
    （例如 `1,3` 表示从第1行至第3行，包含首尾行）。

Type
~~~ cmd
        :%s/old/new/g
~~~
    to change every occurrence in the whole file.

输入
~~~ cmd
        :%s/old/new/g
~~~
    可替换整个文件中的所有匹配项。

Type
~~~ cmd
        :%s/old/new/gc
~~~
    to find every occurrence in the whole file, with a prompt whether to
    substitute or not.

输入
~~~ cmd
        :%s/old/new/gc
~~~
    会逐个查找整个文件中的匹配项，并提示是否替换。

NOTE: You can also select the lines you want to substitute first using Visual mode.
      This will be explained more in a future lesson.

注意：您也可以先通过可视模式选择要替换的行，
      该功能将在后续课程中详细讲解。

# Lesson 4 SUMMARY

第四课 要点总结

1. `<C-g>`{normal}     displays your location and the file status.
    `G`{normal}         moves to the end of the file.
    number `G`{normal}  moves to that line number.
    `gg`{normal}        moves to the first line.

1. `<C-g>`{normal}     显示当前位置和文件状态。
    `G`{normal}         跳转至文件末尾。
    数字`G`{normal}    跳转至指定行号。
    `gg`{normal}       跳转至文件首行。

2. Typing `/`{normal} followed by a phrase searches FORWARD for the phrase.
    Typing `?`{normal} followed by a phrase searches BACKWARD for the phrase.
    After a search type `n`{normal} to find the next occurrence in the same
    direction or `N`{normal} to search in the opposite direction.
    `<C-o>`{normal} takes you back to older positions, `<C-i>`{normal} to
    newer positions.

2. 输入`/`{normal}后接短语可向前搜索该短语。
    输入`?`{normal}后接短语可向后搜索该短语。
    搜索后按`n`{normal}查找同方向下一匹配项，按`N`{normal}反向查找。
    `<C-o>`{normal}返回旧定位点，`<C-i>`{normal}前进至新定位点。

3. Typing `%`{normal} while the cursor is on a (, ), [, ], {, or } goes to its
    match.

3. 当光标位于(、)、[、]、{、或}符号时，输入`%`{normal}可跳转至匹配符号。

4. To substitute new for the first old in a line type
~~~ cmd
        :s/old/new
~~~
    To substitute new for all olds on a line type
~~~ cmd
        :s/old/new/g
~~~
    To substitute phrases between two line #'s type
~~~ cmd
        :#,#s/old/new/g
~~~
    To substitute all occurrences in the file type
~~~ cmd
        :%s/old/new/g
~~~
    To ask for confirmation each time add 'c'
~~~ cmd
        :%s/old/new/gc
~~~

4. 若要将行内第一个旧字符串替换为新字符串，请输入
~~~ cmd
        :s/old/new
~~~
    若要替换行内所有旧字符串，请输入
~~~ cmd
        :s/old/new/g
~~~
    若要在指定行号范围内进行替换，请输入
~~~ cmd
        :#,#s/old/new/g
~~~
    若要替换文件内所有匹配项，请输入
~~~ cmd
        :%s/old/new/g
~~~
    若要在每次替换时进行确认，请添加'c'
~~~ cmd
        :%s/old/new/gc
~~~

# Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND

第五课 5.1: 如何执行外部命令

** Type `:!`{vim} followed by an external command to execute that command. **

** 输入`:!`{vim} 加外部命令即可执行该命令。 **

1. Type the familiar command `:`{normal} to set the cursor at the bottom of
    the screen. This allows you to enter a command-line command.

1. 输入熟悉的冒号命令`:`{normal}，将光标定位到屏幕底部。
    这样您就可以输入命令行指令。

2. Now type the [!](!cmd) (exclamation point) character. This allows you to
    execute any external shell command.

2. 现在输入[!](!cmd)（感叹号）。这允许您执行任何外部Shell命令。

3. As an example type "ls" following the "!" and then hit `<Enter>`{normal}.
    This will show you a listing of your directory, just as if you were
    at the shell prompt.

3. 例如在"!"后输入"ls"并按`<Enter>`{normal}键。
    这将显示目录列表，效果与在Shell终端中执行相同。

NOTE: It is possible to execute any external command this way, and you
      can include arguments.

注意：通过这种方式可以执行任何外部命令，且支持添加参数。

NOTE: All `:`{vim} commands are executed when you press `<Enter>`{normal}.

注意：所有`:`{vim}命令都将在您按下`<Enter>`{normal}键时执行。

# Lesson 5.2: MORE ON WRITING FILES

第五课 5.2: 更多文件保存技巧

** To save the changes made to the text, type `:w`{vim} FILENAME. **

** 要保存文本修改，请输入`:w`{vim} 文件名。 **

1. Type `:!ls`{vim} to get a listing of your directory.
    You already know you must hit `<Enter>`{normal} after this.

1. 输入`:!ls`{vim}查看当前目录列表。
    注意仍需按`<Enter>`{normal}键执行。

2. Choose a filename that does not exist yet, such as TEST.

2. 选择一个尚未存在的文件名，例如TEST。

3. Now type:
~~~ cmd
        :w TEST
~~~
    (where TEST is the filename you chose.)

3. 输入：
~~~ cmd
        :w TEST
~~~
    （其中TEST是您选择的文件名）

4. This saves the current file under the name TEST.
    To verify this, type `:!ls`{vim} again to see your directory.

4. 该操作会将当前文件另存为TEST。
    输入`:!ls`{vim}再次查看目录以确认保存。

NOTE: If you were to exit Neovim and start it again with `nvim TEST`, the file
      would be an exact copy of the tutorial when you saved it.

注意：若退出Neovim后使用`nvim TEST`重新打开，该文件将与保存时的教程副本完全一致。

5. Now remove the file by typing:
~~~ cmd
        :!rm TEST
~~~

5. 输入以下命令删除测试文件：
~~~ cmd
        :!rm TEST
~~~

# Lesson 5.3: SELECTING TEXT TO WRITE

# 第五课 5.3: 选择要保存的文本


** To save part of the file, type `v`{normal} motion `:w FILENAME`{vim}. **

** 要保存文件的部分内容，使用 `v`{normal} 移动命令后输入 `:w 文件名`{vim}。 **

1. Move the cursor to this line.

1. 将光标移动至本行。

2. Press [v](v) and move the cursor to the fifth item below. Notice that the
    text is highlighted.

2. 按下 [v](v) 并将光标移动至下方第五个项目。注意文本会高亮显示。

3. Press the `:`{normal} character. At the bottom of the screen

3. 输入 `:`{normal} 字符。屏幕底部会出现

`:'<,'>`{vim}

will appear.


4. Type

4. 输入

`w TEST`{vim}

`w 测试文件`{vim}

where TEST is a filename that does not exist yet. Verify that you see

其中 TEST 是尚未存在的文件名。在按下 `<Enter>`{normal} 前请确认显示

`:'<,'>w TEST`{vim}

before you press `<Enter>`{normal}.

5. Neovim will write the selected lines to the file TEST. Use `:!ls`{vim} to see it.
    Do not remove it yet! We will use it in the next lesson.

5. Neovim 会将选定内容写入 TEST 文件。使用 `:!ls`{vim} 查看文件。
    暂时不要删除！下节课将继续使用。

NOTE: Pressing [v](v) starts [Visual selection](visual-mode). You can move the cursor around to
      make the selection bigger or smaller. Then you can use an operator to
      do something with the text. For example, `d`{normal} deletes the text.

注意：按下 [v](v) 会启动[可视选择模式](visual-mode)。可通过移动光标调整选区范围，随后使用操作命令处理文本。例如 `d`{normal} 可删除选定文本。

# Lesson 5.4: RETRIEVING AND MERGING FILES

第五课 5.4: 文件读取与合并

** To retrieve the contents of a file, type `:r FILENAME`{vim}. **

** 要读取文件内容，使用 `:r 文件名`{vim}。 **

1. Place the cursor just above this line.

1. 将光标定位至本行上方。

NOTE: After executing Step 2 you will see text from Lesson 5.3. Then move
      DOWN to see this lesson again. Press `u`{normal} to undo after you are done.

注意：完成第二步操作后，您将看到第五课 5.3 的内容。此时向下移动即可返回本节课程。操作完成后可按 `u`{normal} 撤销。

2. Now retrieve your TEST file using the command

2. 使用以下命令读取 TEST 文件

`:r TEST`{vim}

where TEST is the name of the file you used.
    The file you retrieve is placed below the cursor line.

其中 TEST 是您使用的文件名。
    读取的文件内容将插入到光标所在行的下方。

3. To verify that a file was retrieved, cursor back and notice that there
    are now two copies of Lesson 5.3, the original and the retrieved version.

3. 上下移动光标，您会发现当前存在两个第五课 5.3 内容：原始版本和读取版本，以此验证文件读取成功。

NOTE: You can also read the output of an external command. For example,

注意：也可读取外部命令的输出。例如

`:r !ls`{vim}

reads the output of the `ls` command and puts it below the cursor.

可将 `ls` 命令的输出结果插入到光标下方。

# Lesson 5 SUMMARY

第五课 总结

1. [:!command](:!cmd) executes an external command.

1. [:!command](:!cmd) 用于执行外部命令。

Some useful examples are:
     `:!ls `{vim}                   - shows a directory listing
     `:!rm  FILENAME`{vim}          - removes file FILENAME

常用示例如下：
     `:!ls `{vim}                   - 显示目录列表
     `:!rm  文件名`{vim}          - 删除指定文件

2. [:w](:w) FILENAME              writes the current Neovim file to disk with
                             name FILENAME.

2. [:w](:w) 文件名             将当前 Neovim 文件以指定名称保存至磁盘。


3. [v](v)  motion  :w FILENAME   saves the Visually selected lines in file
                             FILENAME.

3. [v](v)  motion  :w FILENAME   将可视模式下选中的行保存至指定文件
                             FILENAME。

4. [:r](:r) FILENAME              retrieves disk file FILENAME and puts it
                             below the cursor position.

4. [:r](:r) FILENAME              读取磁盘文件 FILENAME 的内容
                             并插入到光标所在位置下方。

5. [:r !ls](:r!)                   reads the output of the ls command and
                             puts it below the cursor position.

5. [:r !ls](:r!)                  执行 ls 命令并读取其输出内容
                             插入到光标所在位置下方。

# Lesson 6.1: THE OPEN COMMAND

第六课 6.1：打开命令

** Type `o`{normal} to open a line below the cursor and place you in Insert mode. **

** 在普通模式下输入 `o`{normal} 可在光标下方新建行并进入插入模式 **

1. Move the cursor to the line below marked ✓.

1. 将光标移至下方标有 ✓ 符号的行。

2. Type the lowercase letter `o`{normal} to [open](o) up a line BELOW the
    cursor and place you in Insert mode.

2. 输入小写字母 `o`{normal} 以在光标[下方](o)新建行
    并进入插入模式。

3. Now type some text and press `<Esc>`{normal} to exit Insert mode. Remove your opened lines after you're done.

3. 输入任意文字后按 `<Esc>`{normal} 退出插入模式。操作完成后请删除新建的行。

After typing `o`{normal} the cursor is placed on the open line in Insert mode.

输入 `o`{normal} 后，光标会自动定位到新行并处于插入模式。

4. To open up a line ABOVE the cursor, simply type a [capital O](O), rather
    than a lowercase `o`{normal}. Try this on the line below. Remove your opened lines after you're done.

4. 若要在光标[上方](O)新建行，请使用大写字母 O
    而非小写 o。请在下方的行尝试此操作。操作完成后请删除新建的行。

Open up a line above this by typing O while the cursor is on this line.

将光标定位至本行，输入大写 O 在上方新建行。

# Lesson 6.2: THE APPEND COMMAND

第六课 6.2：追加命令

** Type `a`{normal} to insert text AFTER the cursor. **

** 输入 `a`{normal} 可在光标后方插入文字 **

1. Move the cursor to the start of the line below marked ✗.

1. 将光标移至下方标有 ✗ 符号的行首。

2. Press `e`{normal} until the cursor is on the end of "li".

2. 连续按 `e`{normal} 移动光标至 "li" 结尾处。

3. Type the lowercase letter `a`{normal} to [append](a) text AFTER the cursor.

3. 输入小写字母 `a`{normal} 以在光标[后方](a)追加文字。

4. Complete the word like the line below it. Press `<Esc>`{normal} to exit Insert mode.

4. 参照下方完整行补全单词。按 `<Esc>`{normal} 退出插入模式。

5. Use `e`{normal} to move to the next incomplete word and repeat steps 3 and 4.

5. 使用 `e`{normal} 移至下一个不完整单词，重复步骤3-4。

This li will allow you to pract appendi text to a line.
This line will allow you to practice appending text to a line.

NOTE: [a](a), [i](i), and [A](A) all go to the same Insert mode, the only
      difference is where the characters are inserted.

注： [a](a)、[i](i) 与 [A](A) 均会进入相同的插入模式，
      区别仅在于字符插入的位置不同。

# Lesson 6.3: ANOTHER WAY TO REPLACE

第六课 6.3：进阶替换方法

** Type a capital `R`{normal} to replace more than one character. **

** 输入大写 `R`{normal} 可连续替换多个字符 **

1. Move the cursor to the first line below marked ✗. Move the cursor to
    the beginning of the first "xxx".

1. 将光标移至下方首个标有 ✗ 符号的行。移动光标至
    第一个 "xxx" 的起始位置。

2. Now press `R`{normal} ([capital R](R)) and type the number below it in the
    second line, so that it replaces the "xxx".

2. 现在按下普通模式下的 `R`{normal}（[大写 R](R)），并在第二行输入其下方的数字，以替换 "xxx"。

3. Press `<Esc>`{normal} to leave [Replace mode](mode-replace). Notice that
    the rest of the line remains unmodified.

3. 按下 `<Esc>`{normal} 退出[替换模式](mode-replace)。注意该行的其余部分保持不变。

4. Repeat the steps to replace the remaining "xxx".

4. 重复以上步骤替换剩余的 "xxx"。

Adding 123 to xxx gives you xxx.
Adding 123 to 456 gives you 579.

NOTE: Replace mode is like Insert mode, but every typed character
      replaces an existing character.

注意：替换模式类似于插入模式，但每个输入的字符都会替换现有字符。

# Lesson 6.4: COPY AND PASTE TEXT

第六课 6.4: 文本复制与粘贴

** Use the `y`{normal} operator to copy text and `p`{normal} to put it. **

** 使用 `y`{normal} 操作符复制文本，用 `p`{normal} 进行粘贴。 **

1. Go to the line marked with ✓ below and place the cursor after "a)".

1. 转到标记有 ✓ 的行，将光标置于 "a)" 之后。

2. Start Visual mode with `v`{normal} and move the cursor to just before
    "first".

2. 使用 `v`{normal} 进入可视模式，将光标移动到 "first" 之前。

3. Type `y`{normal} to [yank](yank) (copy) the highlighted text.

3. 输入 `y`{normal} [复制](yank) 高亮文本。

4. Move the cursor to the end of the next line: `j$`{normal}

4. 移动到下一行行尾：`j$`{normal}

5. Type `p`{normal} to [put](put) (paste) the text.

5. 输入 `p`{normal} [粘贴](put) 文本。

6. Press `a`{normal} and then type "second". Press `<Esc>`{normal} to leave
    Insert mode.

6. 按 `a`{normal} 进入插入模式后输入 "second"。按 `<Esc>`{normal} 退出插入模式。

7. Use Visual mode to select "item.", yank it with `y`{normal}, move to the
    end of the next line with `j$`{normal} and put the text there with `p`{normal}

7. 使用可视模式选中 "item."，用 `y`{normal} 复制，用 `j$`{normal} 移动到下一行行尾并用 `p`{normal} 粘贴

a) This is the first item.
b)

NOTE: You can use `y`{normal} as an operator: `yw`{normal} yanks one word.

注意：可将 `y`{normal} 作为操作符使用：`yw`{normal} 可复制一个单词。

NOTE: You can use `P`{normal} to put before the cursor, rather than after.

注意：可使用 `P`{normal} 在光标前粘贴（而非光标后）。

# Lesson 6.5: SET OPTION

第六课 6.5: 设置选项

** Set an option so search and substitute commands ignore case. **

** 设置搜索和替换命令忽略大小写的选项。 **

There are many settings in Neovim that you can configure to suit your needs.

Neovim 提供众多可自定义配置以适应需求的设置。

1. Search for 'ignore' by entering: `/ignore`
    Repeat several times by pressing `n`{normal}.

1. 通过输入 `/ignore` 搜索 'ignore'
    多次按 `n`{normal} 重复搜索。

2. Set the 'ic' (Ignore case) option by entering:
~~~ cmd
        :set ic
~~~

2. 通过以下命令设置 'ic'（忽略大小写）选项：
~~~ cmd
        :set ic
~~~

 3. Now search for 'ignore' again by pressing `n`{normal}.
    Notice that Ignore and IGNORE are now also found.

3. 现在再次按 `n`{normal} 搜索 'ignore'
    注意此时 Ignore 和 IGNORE 也会被匹配到。

4. Set the 'hlsearch' and 'incsearch' options:
~~~ cmd
        :set hls is
~~~

4. 设置 'hlsearch' 和 'incsearch' 选项：
~~~ cmd
        :set hls is
~~~

5. Now type the search command again and see what happens: /ignore <Enter>

5. 再次输入搜索命令并观察效果：/ignore <回车>

6. To disable ignoring case enter:
6. 要禁用忽略大小写功能：

~~~ cmd
        :set noic
~~~

7. To invert the value of a setting, prepend it with "inv":
7. 要反转选项值，可在设置前加 "inv"：

~~~ cmd
        :set invic
~~~

NOTE: To remove the highlighting of matches enter:
注意：清除匹配项高亮显示请输入：

~~~ cmd
        :nohlsearch
~~~

NOTE: If you want to ignore case for just one search command, use [\c](/\c)
      in the phrase: /ignore\c <Enter>

注意：若只需对单次搜索忽略大小写，可在搜索词中使用 [\c](/\c)
      例如：/ignore\c <回车>

# Lesson 6 SUMMARY

第六课 要点总结

1. Type `o`{normal} to open a line BELOW the cursor and start Insert mode.
    Type `O`{normal} to open a line ABOVE the cursor.

1. 输入 `o`{normal} 在光标下方插入新行并进入插入模式。
    输入 `O`{normal} 在光标上方插入新行。

2. Type `a`{normal} to insert text AFTER the cursor.
    Type `A`{normal} to insert text after the end of the line.

2. 输入 `a`{normal} 在光标后方开始插入文本。
    输入 `A`{normal} 在行末开始插入文本。

3. The `e`{normal} command moves to the end of a word.

3. `e`{normal} 命令可跳转至单词末尾。

4. The `y`{normal} operator copies text, `p`{normal} pastes it.

4. `y`{normal} 操作符用于复制文本，`p`{normal} 用于粘贴。

5. Typing a capital `R`{normal} enters Replace mode until `<Esc>`{normal} is
    pressed.

5. 输入大写 `R`{normal} 进入替换模式，直至按下 `<Esc>`{normal} 退出。

6. Typing "[:set](:set) xxx" sets the option "xxx". Some options are:

6. 输入 "[:set](:set) xxx" 可设置 "xxx" 选项。常用选项包括：

'ic' 'ignorecase'   ignore upper/lower case when searching
        'is' 'incsearch'    show partial matches for a search phrase
        'hls' 'hlsearch'    highlight all matching phrases

'ic' 'ignorecase'   搜索时忽略大小写
        'is' 'incsearch'    显示搜索词的部分匹配结果
        'hls' 'hlsearch'    高亮所有匹配项

You can either use the long or the short option name.

可使用完整选项名或简称。

7. Prepend "no" to switch an option off:
7. 添加 "no" 前缀可关闭选项：
~~~ cmd
        :set noic
~~~
 8. Prepend "inv" to invert an option:
 8. 添加 "inv" 前缀可反转选项状态：
~~~ cmd
        :set invic
~~~
# Lesson 7.1: GETTING HELP

# 第七课第1节：获取帮助

** Use the online help system. **

** 使用在线帮助系统 **

Neovim has a comprehensive online help system.

Neovim 拥有一个全面的在线帮助系统。

To get started, try one of these two:

可通过以下两种方式启动帮助：

- press the `<F1>`{normal} key (if you have one)
  - type `:help`{vim}

- 按下 `<F1>`{normal} 键（如果键盘支持）
  - 输入 `:help`{vim}

Read the text in the help window to find out how the help works.
Type `<C-w><C-w>`{normal} to jump from one window to another.
Type `:q`{vim} to close the help window.

阅读帮助窗口中的文字以了解帮助系统使用方法。
输入 `<C-w><C-w>`{normal} 可在不同窗口间跳转。
输入 `:q`{vim} 关闭帮助窗口。

You can find help on just about any subject, by giving an argument to the
":help" command. Try these (don't forget to press <Enter>):
你可以通过给":help"命令添加参数来获取几乎所有主题的帮助文档。尝试以下命令（别忘了按<Enter>键）：
~~~ cmd
    :help w
    :help c_CTRL-D
    :help insert-index
    :help user-manual
~~~
# Lesson 7.2: CREATE A STARTUP SCRIPT

第七课第二节：创建启动脚本

** Enable Neovim features. **

** 启用Neovim的高级功能 **


Neovim is a very configurable editor. You can customise it any way you like.
To start using more features create an "init.vim" file.

Neovim是一款高度可定制的编辑器。您可以根据个人喜好进行各种配置。要开始使用更多高级功能，请创建"init.vim"文件。

1. Start editing the "init.vim" file.

1. 开始编辑"init.vim"文件：

`:call mkdir(stdpath('config'),'p')`{vim}
    `:exe 'edit' stdpath('config').'/init.vim'`{vim}


2. Write the file with:

2. 写入文件：

`:w`{vim}

You can add all your preferred settings to this "init.vim" file.
For more information type `:help init.vim`{vim}.

您可以将所有偏好设置添加至此"init.vim"文件中。
更多信息请键入`:help init.vim`{vim}。

# Lesson 7.3: COMPLETION

第七课第三节：自动补全

** Command line completion with `<C-d>`{normal} and `<Tab>`{normal}. **

** 使用`<C-d>`{normal}和`<Tab>`{normal}进行命令行补全 **

1. List the contents of the current directory: `:!ls`{vim}

1. 列出当前目录内容：`:!ls`{vim}

2. Type the start of a command: `:e`{vim}

2. 键入命令起始部分：`:e`{vim}

3. Press `<C-d>`{normal} and Neovim will show a list of commands beginning with "e".

3. 按`<C-d>`{normal}，Neovim将显示所有以"e"开头的命令列表

4. Press `<Tab>`{normal} and Neovim will complete the command name to ":edit".

4. 按`<Tab>`{normal}，Neovim将自动补全命令为":edit"

5. Now add a space and the start of an existing file name: `:edit FIL`{vim}

5. 添加空格及现有文件名的起始部分：`:edit FIL`{vim}

6. Press `<Tab>`{normal}. Neovim will complete the name ("FIL" -> "FILE", if it is unique).

6. 按`<Tab>`{normal}。Neovim将补全文件名（若唯一匹配，"FIL"将补全为"FILE"）

NOTE: Completion works for many commands. It is especially useful for `:help`{vim}.

注意：自动补全适用于多数命令，在`:help`{vim}中尤其实用。

# Lesson 7 SUMMARY

第七课总结

1. Type `:help`{vim}
    or press `<F1>`{normal} or `<Help>`{normal} to open a help window.

1. 输入`:help`{vim}
    或按`<F1>`{normal}、`<Help>`{normal}打开帮助窗口

2. Type `:help TOPIC`{vim} to find help on TOPIC.

2. 输入`:help 主题`{vim}查询特定主题帮助


3. Type `<C-w><C-w>`{normal} to jump to another window

3. 输入`<C-w><C-w>`{normal}切换窗口

4. Type `:q`{vim} to close the help window

4. 输入`:q`{vim}关闭帮助窗口

5. Create an init.vim startup script to keep your preferred settings.

5. 创建init.vim启动脚本保存个人配置

6. While in command mode, press `<C-d>`{normal} to see possible completions.
    Press `<Tab>`{normal} to use one completion.

6. 在命令模式下，按`<C-d>`{normal}查看补全选项
    按`<Tab>`{normal}应用补全结果

# CONCLUSION

课程总结

This was intended to give a brief overview of the Neovim editor, just enough to
allow you to use it fairly easily. It is far from complete as Neovim has
many many more commands. Consult the help often.
There are also countless great tutorials and videos to be found online.
Here's a bunch of them:

本节旨在对Neovim编辑器进行简要概述，帮助您比较轻松地掌握基础操作。由于Neovim拥有海量命令集，本教程远非完整指南。建议您随时查阅帮助文档，并通过以下优质在线资源深入学习：

- *Learn Vim Progressively*:
  https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/
- *Learning Vim in 2014*:
  https://benmccormick.org/learning-vim-in-2014/
- *Vimcasts*:
  http://vimcasts.org/
- *Vim Video-Tutorials by Derek Wyatt*:
  http://derekwyatt.org/vim/tutorials/
- *Learn Vimscript the Hard Way*:
  https://learnvimscriptthehardway.stevelosh.com/
- *7 Habits of Effective Text Editing*:
  https://www.moolenaar.net/habits.html
- *vim-galore*:
  https://github.com/mhinz/vim-galore

- *Learn Vim Progressively*（渐进式Vim学习）:
  https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/
- *Learning Vim in 2014*（2014版Vim学习指南）:
  https://benmccormick.org/learning-vim-in-2014/
- *Vimcasts*（Vim教学视频）:
  http://vimcasts.org/
- *Vim Video-Tutorials by Derek Wyatt*（Derek Wyatt的Vim视频教程）:
  http://derekwyatt.org/vim/tutorials/
- *Learn Vimscript the Hard Way*（Vimscript硬核教程）:
  https://learnvimscriptthehardway.stevelosh.com/
- *7 Habits of Effective Text Editing*（高效文本编辑七原则）:
  https://www.moolenaar.net/habits.html
- *vim-galore*（Vim宝典）:
  https://github.com/mhinz/vim-galore

If you prefer a book, *Practical Vim* by Drew Neil is recommended often
(the sequel, *Modern Vim*, includes material specific to Neovim).

若偏好纸质书籍，Drew Neil所著《Practical Vim》广受推崇（其续作《Modern Vim》包含Neovim专项内容）。

This tutorial was written by Michael C. Pierce and Robert K. Ware, Colorado
School of Mines using ideas supplied by Charles Smith, Colorado State
University. E-mail: bware@mines.colorado.edu.

本教程由科罗拉多矿业学院Michael C. Pierce与Robert K. Ware编写，科罗拉多州立大学Charles Smith提供创意支持。联系邮箱：bware@mines.colorado.edu。

Modified for Vim by Bram Moolenaar.
Modified for vim-tutor-mode by Felipe Morales.
Modified for Neovim by Rory Nesbitt.

Bram Moolenaar针对Vim版本进行改编。
Felipe Morales实现vim-tutor-mode模式适配。
Rory Nesbitt完成Neovim版本改造。

// vim: nowrap
